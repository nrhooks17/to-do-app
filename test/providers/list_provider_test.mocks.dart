// Mocks generated by Mockito 5.4.5 from annotations
// in todo_app/test/providers/list_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/models/list.dart' as _i4;
import 'package:todo_app/services/list_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ListService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListService extends _i1.Mock implements _i2.ListService {
  MockListService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TaskList>> getAllLists() => (super.noSuchMethod(
        Invocation.method(
          #getAllLists,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskList>>.value(<_i4.TaskList>[]),
      ) as _i3.Future<List<_i4.TaskList>>);

  @override
  _i3.Future<List<_i4.TaskList>> getActiveLists() => (super.noSuchMethod(
        Invocation.method(
          #getActiveLists,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskList>>.value(<_i4.TaskList>[]),
      ) as _i3.Future<List<_i4.TaskList>>);

  @override
  _i3.Future<List<_i4.TaskList>> getDeletedLists() => (super.noSuchMethod(
        Invocation.method(
          #getDeletedLists,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskList>>.value(<_i4.TaskList>[]),
      ) as _i3.Future<List<_i4.TaskList>>);

  @override
  _i3.Future<_i4.TaskList?> getListById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getListById,
          [id],
        ),
        returnValue: _i3.Future<_i4.TaskList?>.value(),
      ) as _i3.Future<_i4.TaskList?>);

  @override
  _i3.Future<void> addList(_i4.TaskList? list) => (super.noSuchMethod(
        Invocation.method(
          #addList,
          [list],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateList(_i4.TaskList? list) => (super.noSuchMethod(
        Invocation.method(
          #updateList,
          [list],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteList(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteList,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> restoreList(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreList,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateListName(
    String? id,
    String? newName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateListName,
          [
            id,
            newName,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> permanentlyDeleteList(String? id) => (super.noSuchMethod(
        Invocation.method(
          #permanentlyDeleteList,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
